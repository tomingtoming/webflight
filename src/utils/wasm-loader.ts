import type { YSFlightCore } from '@/types/wasm'

// Declare the module loader function
declare function YSFlightCore(config?: {
  locateFile?: (path: string) => string;
  onRuntimeInitialized?: () => void;
}): Promise<YSFlightCore>;

let wasmModule: YSFlightCore | null = null;
let initPromise: Promise<YSFlightCore> | null = null;

export async function loadWasmModule(): Promise<YSFlightCore> {
  // Return existing module if already loaded
  if (wasmModule) {
    return wasmModule;
  }
  
  // Return existing promise if initialization is in progress
  if (initPromise) {
    return initPromise;
  }
  
  // Start initialization
  initPromise = new Promise<YSFlightCore>(async (resolve, reject) => {
    try {
      // Dynamically import the WASM module
      // @ts-ignore - This will be generated by Emscripten
      const moduleLoader = await import('/ysflight-core.js') as any;
      
      // Initialize the module
      const module = await moduleLoader.default({
        locateFile: (path: string) => {
          if (path.endsWith('.wasm')) {
            return '/ysflight-core.wasm';
          }
          return path;
        },
        onRuntimeInitialized: () => {
          console.log('WASM Runtime initialized successfully');
        }
      });
      
      wasmModule = module;
      resolve(module);
    } catch (error) {
      console.error('Failed to load WASM module:', error);
      reject(error);
    }
  });
  
  return initPromise;
}

export function getWasmModule(): YSFlightCore | null {
  return wasmModule;
}

export function isWasmReady(): boolean {
  return wasmModule !== null;
}